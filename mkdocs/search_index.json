{
    "docs": [
        {
            "location": "/", 
            "text": "RegReplace\n\n\nA regex sequencer for Sublime Text.\n\n\n\n\nOverview\n\n\nReg Replace is a plugin for Sublime Text 2 that allows the creating of commands consisting of sequences of find and replace instructions.\n\n\nInstallation\n\n\n\n\nUse Package Control to install.\n\n\nOr you can download or clone directly and drop into your Sublime Text packages directory (plugin folder must be named RegReplace).", 
            "title": "Home"
        }, 
        {
            "location": "/#regreplace", 
            "text": "A regex sequencer for Sublime Text.", 
            "title": "RegReplace"
        }, 
        {
            "location": "/#overview", 
            "text": "Reg Replace is a plugin for Sublime Text 2 that allows the creating of commands consisting of sequences of find and replace instructions.", 
            "title": "Overview"
        }, 
        {
            "location": "/#installation", 
            "text": "Use Package Control to install.  Or you can download or clone directly and drop into your Sublime Text packages directory (plugin folder must be named RegReplace).", 
            "title": "Installation"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguring and using RegReplace.\n\n\n\n\nCreate Find and Replace Sequences\n\n\nTo use, replacements must be defined in the reg_replace.sublime-settings file.\n\n\nThere are two kinds of definitions.  The first uses regex to find regions, and then you can use scopes to qualify the regions before applying the replace.\n\n\n    \n// Required parameters:\n\n    \n//     find:    Regex description of what you would like to target.\n\n    \n//\n\n    \n// Optional parameters:\n\n    \n//     replace:      description of what you would like to replace target with.\n\n    \n//                   Variables are okay for non-literal searches and are done by escaping\n\n    \n//                   the selection number \\\\1 etc.  Default value is \n (empty string)\n\n    \n//     literal:      Boolean setting to define whether the find and replace is literal or not.\n\n    \n//                   Default is false.\n\n    \n//     greedy:       Boolean setting to define whether search is greedy or not. Default is true.\n\n    \n//     case:         Boolean defining case sensitivity.  True equals sensitive. Default is true.\n\n    \n//     dotall:       Boolean defining whether to use dotall flag in regex (include \\n etc. when using dot).\n\n    \n//                   Default is False\n\n    \n//     scope_filter: an array of scope qualifiers for the match.\n\n    \n//                       - Any instance of scope qualifies match: scope.name\n\n    \n//                       - Entire match of scope qualifies match: !scope.name\n\n    \n//                       - Any instance of scope disqualifies match: -scope.name\n\n    \n//                       - Entire match of scope disqualifies match: -!scope.name\n\n\n\n    \n{\n\n        \nreplacements\n:\n \n{\n\n            \nhtml5_remove_deprecated_type_attr\n:\n \n{\n\n                \nfind\n:\n \n(\n(style|script)[^\n]*)\\\\stype=(\\\n|\n)text/(css|javascript)(\\\n|\n)([^\n]*\n)\n,\n\n                \nreplace\n:\n \n\\\\1\\\\6\n,\n\n                \ngreedy\n:\n \ntrue\n,\n\n                \ncase\n:\n \nfalse\n\n            \n},\n\n\n\n\n\n\nThe second kind of definition allows you to search for a scope type and then apply regex to the regions to filter the matches and make replaces.\n\n\n    \n// Required parameters:\n\n    \n//     scope:    scope you would like to target\n\n    \n//\n\n    \n// Optional parameters:\n\n    \n//     find:            regex description that is to be applied to the scope\n\n    \n//                      to qualify.  Also can be used to find and replace\n\n    \n//                      within the found scope.  Default is None.\n\n    \n//     replace:         description of what you would like to replace within the scope.\n\n    \n//                      Default value is \n\\\\0\n.\n\n    \n//     literal:         Boolean setting to define whether the find and replace is literal or not.\n\n    \n//                      Default is false.\n\n    \n//     greedy_replace:  Boolean setting to define whether regex search is greedy or not. Default is true.\n\n    \n//     greedy_scope:    Boolean setting to define whether scope search is greedy or not. Default is true.\n\n    \n//     case:            Boolean setting to define whether regex search is case sensitive. Default is true.\n\n    \n//     dotall:          Boolean defining whether to use dotall flag in regex (include \\n etc. when using dot).\n\n    \n//                      Default is False\n\n    \n//     multi_pass_regex:Boolean setting to define whether there will be multiple sweeps on the scope region\n\n    \n//                      region to find and replace all instances of the regex, when regex cannot be formatted\n\n    \n//                      to find all instances in a greedy fashion.  Default is false.\n\n\n\n    \n{\n\n            \nreplacements\n:\n \n{\n\n                \nremove_comments\n:\n \n{\n\n                    \nscope\n:\n \ncomment\n,\n\n                    \nfind\n \n:\n \n(([^\\\\n\\\\r]*)(\\\\r\\\\n|\\\\n))*([^\\\\n\\\\r]+)\n,\n\n                    \nreplace\n:\n \n,\n\n                    \ngreedy_replace\n:\n \ntrue\n\n                \n}\n\n\n\n\n\n\nOnce you have replacements defined, there are a number of ways you can run a sequence.  One way is to create a command in the command palette by editing/creating a Default.sublime-commands in your User folder and adding your command.  RegReplace comes with its own Default.sublime-commands file and includes some examples showing simple replacement commands and an example showing the chaining of multiple replacements.\n\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Remove Trailing Spaces\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nremove_trailing_spaces\n]}\n\n    \n},\n\n\n\n\n\n\nChained replacements in one command\n\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Remove HTML Comments and Trailing Spaces\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nremove_html_comments\n,\n \nremove_trailing_spaces\n]}\n\n    \n}\n\n\n\n\n\n\nYou can also bind a replacement command to a shortcut.\n\n\n    \n{\n\n        \nkeys\n:\n \n[\nctrl+shift+t\n],\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nremove_trailing_spaces\n]}\n\n    \n}\n\n\n\n\n\n\nView Without Replacing\n\n\nIf you would simply like to view what the sequence would find without replacing, you can construct a command to highlight targets without replacing them (each pass could affect the end result, but this just shows all passes without predicting replaces).\n\n\nJust add the \nfind_only\n argument and set it to true.\n\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Remove Trailing Spaces\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nremove_trailing_spaces\n],\n \nfind_only\n:\n \ntrue\n}\n\n    \n},\n\n\n\n\n\n\nA prompt will appear allowing you to replace the highlighted regions.  Regions will be cleared on cancel.\n\n\nIf for any reason the highlights do not get cleared, you can simply run the \nRegReplace: Clear Highlights\n command from the command palette.\n\n\nHighlight color and style can be changed in the settings file.\n\n\nOverride Actions\n\n\nIf instead of replacing you would like to do something else, you can override the action. Actions are defined in commands by setting the \naction\n parameter.  Some actions may require additional parameters be set in the \noptions\n parameter.  See examples below.\n\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Fold HTML Comments\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nremove_html_comments\n],\n \naction\n:\n \nfold\n}\n\n    \n},\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Unfold HTML Comments\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nremove_html_comments\n],\n \naction\n:\n \nunfold\n}\n\n    \n},\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Mark Example\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\n\n            \nreplacements\n:\n \n[\nexample\n],\n\n            \naction\n:\n \nmark\n,\n\n            \noptions\n:\n \n{\nkey\n:\n \nname\n,\n \nscope\n:\n \ninvalid\n,\n \nstyle\n:\n \nunderline\n}\n\n        \n}\n\n    \n},\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Unmark Example\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\n\n            \naction\n:\n \nunmark\n,\n\n            \noptions\n:\n \n{\nkey\n:\n \nname\n}\n\n        \n}\n\n    \n},\n\n\n\n\n\n\nSupported override actions:\n\n\n\n\nfold\n\n\nunfold\n\n\nmark\n\n\nunmark\n\n\n\n\nFold Override\n\n\naction\n:\n \nfold\n\n\n\n\n\n\nThis action folds the given find target.  This action has no parameters.\n\n\nUnfold Override\n\n\naction\n:\n \nunfold\n\n\n\n\n\n\nThis action unfolds the all regions that match the given find target.  This action has no parameters\n\n\nMark Override\n\n\naction\n:\n \nmark\n\n\n\n\n\n\nThis action highlights the regions of the given find target.\n\n\nMark Options\n\n\nAction options are specified with the \noptions\n key.\n\n\nRequired Parameters:\n\n\noptions\n:\n \n{\nkey\n:\n \nname\n}\n\n\n\n\n\n\nUnique name for highlighted regions.\n\n\nOptional Parameters:\n\n\noptions\n:\n \n{\nscope\n:\n \ninvalid\n}\n\n\n\n\n\n\nScope name to use as the color. Default is \ninvalid\n.\n\n\noptions\n:\n \n{\nstyle\n:\n \noutline\n}\n\n\n\n\n\n\nHighlight style (solid|underline|outline). Default is \noutline\n.\n\n\nUnmark Override\n\n\naction\n:\n \nunmark\n\n\n\n\n\n\nThis action removes the highlights of a given \nkey\n.  Replacements can be omitted with this command.\n\n\nUnmark Options\n\n\nAction options are specified with the \noptions\n key.\n\n\nRequired Parameters:\n\n\noptions\n:\n \n{\nkey\n:\n \nname\n}\n\n\n\n\n\n\nunique name of highlighted regions to clear\n\n\nMulti-Pass\n\n\nSometimes a regular expression cannot be made to find all instances in one pass.  In this case, you can use the multi-pass option.\n\n\nMulti-pass cannot be paired with override actions (it will be ignored), but it can be paired with \nfind_only\n.  Multi-pass will sweep the file repeatedly until all instances are found and replaced.  To protect against poorly constructed multi-pass regex looping forever, there is a default max sweep threshold that will cause the sequence to kick out if it is reached.  This threshold can be tweaked in the settings file.\n\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Remove Trailing Spaces\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nexample\n],\n \nmulti_pass\n:\n \ntrue\n}\n\n    \n},\n\n\n\n\n\n\nReplace Only Under Selection(s)\n\n\nSometimes you only want to search under selections.  This can be done by enabling the \nselection_only\n setting in the settings file.  By enabling this setting, regex targets will be limited to the current selection if and only if a selection exists.  Auto replace/highlight on save events ignore this setting.  If you have a command that you wish to ignore this setting, just set the \nno_selection\n argument to \ntrue\n.  Highlight style will be forced to underline under selections if \nfind_only\n is set to ensure they will show up.\n\n\n    \n// Ignore \nselection_only\n setting\n\n    \n{\n\n        \ncaption\n:\n \nReg Replace: Remove Trailing Spaces\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\nexample\n],\n \nmulti_pass\n:\n \ntrue\n,\n \nno_selection\n:\n \ntrue\n}\n\n    \n},\n\n\n\n\n\n\nUse Regex on Entire File Buffer when Using Selections\n\n\nSometimes you might have a regex chain that lends itself better to performing the regex on the entire file buffer and then pick the matches under the selections as opposed to the default behavior of applying the regex directly to the selection buffer.  To do this, you can use the option \nregex_full_file_with_selections\n.\n\n\n    \n{\n\n        \ncaption\n:\n \nRemove: All Comments\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\n\n            \nreplacements\n:\n \n[\n\n                \nremove_comments\n,\n \nremove_trailing_spaces\n,\n\n                \nremove_excessive_newlines\n,\n \nensure_newline_at_file_end\n\n            \n],\n\n            \nfind_only\n:\n \ntrue\n,\n\n            \nregex_full_file_with_selections\n:\n \ntrue\n\n        \n}\n\n    \n},\n\n\n\n\n\n\nApply Regex Right Before File Save Event\n\n\nIf you want to automatically apply a sequence right before a file saves, you can define sequences in the reg_replace.sublime-settings file.  Each \non save\n sequence will be applied to the files you specify by file patterns or file regex.  Also, you must have \non_save\n set to \ntrue\n.  You can also just highlight, fold, or unfold by regex by adding the \naction\n: \nmark\n key/value pair (options are mark, fold, and unfold). Both types can be used at the same time. Actions are performed after replacements.\n\n\nExample:\n\n\n    \n// If on_save is true, RegReplace will search through the file patterns listed below right before a file is saved,\n\n    \n// if the file name matches a file pattern, the sequence will be applied before the file is saved.\n\n    \n// RegReplace will apply all sequences that apply to a given file in the order they appear below.\n\n    \non_save\n:\n \ntrue\n,\n\n\n    \n// Highlight visual settings\n\n    \non_save_highlight_scope\n:\n \ninvalid\n,\n\n    \non_save_highlight_style\n:\n \noutline\n,\n\n\n    \non_save_sequences\n:\n \n[\n\n        \n// An example on_save event that removes dangling commas from json files\n\n        \n// - file_regex: an array of regex strings that must match the file for the sequence to be applied\n\n        \n// - case: regex case sensitivity (true|false) false is default (this setting is optional)\n\n        \n// - file_pattern: an array of file patterns that must match for the sequence to be applied\n\n        \n// - sequence: an array of replacement definitions to be applied on saving the file\n\n        \n// - multi_pass: perform multiple passes on file to catch all regex instances\n\n        \n{\n\n            \nfile_regex\n:\n \n[\n.*\\\\.sublime-(settings|commands|menu|keymap|mousemap|theme|build|project|completions|commands)\n],\n\n            \nfile_pattern\n:\n \n[\n*.json\n],\n\n            \nsequence\n:\n \n[\nremove_json_dangling_commas\n]\n\n        \n},\n\n        \n// An example on_save_sequence that targets all files and highlights trailing spaces\n\n        \n// - file_pattern: an array of file patterns that must match for the sequence to be applied\n\n        \n// - sequence: an array of replacement definitions to be applied on saving the file\n\n        \n// - action: (mark|fold|unfold) instead of replace\n\n        \n{\n\n            \nfile_pattern\n:\n \n[\n*\n],\n\n            \nsequence\n:\n \n[\nremove_trailing_spaces\n],\n\n            \naction\n:\n \nmark\n\n        \n}\n\n    \n],\n\n\n\n\n\n\nCustom Replace Plugins\n\n\nThere are times that simple regular expression and replace is not enough.  Since RegReplace uses Python\ns re regex engine, we can use python code to intercept the replace and do more complex things via a plugin.\n\n\nIn this example we are going to search for dates with the form YYYYMMDD and increment them by one day.\n\n\nHere is the regex rule, notice we have defined a plugin to replace.  Plugins are defined as if you were importing a module in python.  So in this example, we are loading it from the \nUser\n package. You do not need an \n__init__.py\n file in \nrr_modules\n folder; it is recommended to not use one as Sublime shouldn\nt bother loading these files as RegReplace will load them when needed.\n\n\ndate_up\n:\n \n{\n\n    \nfind\n:\n \n(?P\nyear\n\\\\d{4})(?P\nmonth\n\\\\d{2})(?P\nday\n\\\\d{2})\n,\n\n    \nplugin\n:\n \nUser.rr_modules.date_up\n\n    \n// \nargs\n: {\nsome_plugin_arguments\n: \nif_desired\n}  \n== optional plugin arguments\n\n\n}\n\n\n\n\n\n\nNext we can define the command that will utilize the regex rule:\n\n\n    \n{\n\n        \ncaption\n:\n \nReplace: Date Up\n,\n\n        \ncommand\n:\n \nreg_replace\n,\n\n        \nargs\n:\n \n{\nreplacements\n:\n \n[\ndate_up\n],\n \nfind_only\n:\n \ntrue\n}\n\n    \n},\n\n\n\n\n\n\nLastly we can provide the plugin.  RegReplace will load the plugin and look for a function called \nreplace\n.  \nreplace\n takes a python re match object, and any arguments you want to feed it (arguments are defined in the regex rule as shown above):\n\n\nSHORT_MONTH\n \n=\n \n30\n\n\nLONG_MONTH\n \n=\n \n31\n\n\nFEB_MONTH\n \n=\n \n28\n\n\nFEB_LEAP_MONTH\n \n=\n \n29\n\n\n\nJAN\n \n=\n \n1\n\n\nFEB\n \n=\n \n2\n\n\nMAR\n \n=\n \n3\n\n\nAPR\n \n=\n \n4\n\n\nMAY\n \n=\n \n5\n\n\nJUN\n \n=\n \n6\n\n\nJUL\n \n=\n \n7\n\n\nAUG\n \n=\n \n8\n\n\nSEP\n \n=\n \n9\n\n\nOCT\n \n=\n \n10\n\n\nNOV\n \n=\n \n11\n\n\nDEC\n \n=\n \n12\n\n\n\n\ndef\n \nis_leap_year\n(\nyear\n):\n\n    \nreturn\n \n((\nyear\n \n%\n \n4\n \n==\n \n0\n)\n \nand\n \n(\nyear\n \n%\n \n100\n \n!=\n \n0\n))\n \nor\n \n(\nyear\n \n%\n \n400\n \n==\n \n0\n)\n\n\n\n\ndef\n \ndays_in_months\n(\nmonth\n,\n \nyear\n):\n\n    \ndays\n \n=\n \nLONG_MONTH\n\n    \nif\n \nmonth\n \n==\n \nFEB\n:\n\n        \ndays\n \n=\n \nFEB_LEAP_MONTH\n \nif\n \nis_leap_year\n(\nyear\n)\n \nelse\n \nFEB_MONTH\n\n    \nelif\n \nmonth\n \nin\n \n[\nSEP\n,\n \nAPR\n,\n \nJUN\n,\n \nNOV\n]:\n\n        \ndays\n \n=\n \nSHORT_MONTH\n\n    \nreturn\n \ndays\n\n\n\n\ndef\n \nincrement_by_day\n(\nday\n,\n \nmonth\n,\n \nyear\n):\n\n    \nmdays\n \n=\n \ndays_in_months\n(\nmonth\n,\n \nyear\n)\n\n    \nif\n \nday\n \n==\n \nmdays\n:\n\n        \nday\n \n=\n \n1\n\n        \nif\n \nmonth\n \n==\n \nDEC\n:\n\n            \nmonth\n \n=\n \nJAN\n\n            \nyear\n \n+=\n \n1\n\n        \nelse\n:\n\n            \nmonth\n \n+=\n \n1\n\n    \nelse\n:\n\n        \nday\n \n+=\n \n1\n\n\n    \nreturn\n \nday\n,\n \nmonth\n,\n \nyear\n\n\n\n\ndef\n \nreplace\n(\nm\n):\n\n    \ng\n \n=\n \nm\n.\ngroupdict\n()\n\n    \nyear\n \n=\n \nint\n(\ng\n[\nyear\n]\n.\nlstrip\n(\n0\n))\n\n    \nmonth\n \n=\n \nint\n(\ng\n[\nmonth\n]\n.\nlstrip\n(\n0\n))\n\n    \nday\n \n=\n \nint\n(\ng\n[\nday\n]\n.\nlstrip\n(\n0\n))\n\n\n    \nday\n,\n \nmonth\n,\n \nyear\n \n=\n \nincrement_by_day\n(\nday\n,\n \nmonth\n,\n \nyear\n)\n\n\n    \nreturn\n \n%04d%02d%02d\n \n%\n \n(\nyear\n,\n \nmonth\n,\n \nday\n)\n\n\n\n\n\n\nHere is some text to test the example on:\n\n\n# Test 1: 20140228\n# Test 2: 20141231\n# Test 3: 20140101\n\n\n\n\n\nRegReplace comes with a very simple example you can test with found at \n/Packages/RegReplace/rr_modules/example.py\n.  Imported with \nRegReplace.rr_modules.example\n.\n\n\nExtended Back References\n\n\nPython\ns \nre\n module (which is what RegReplace uses), doesn\nt support title case back references: \n\\u\n, \n\\U\n, \n\\l\n, \n\\L\n, or \n\\E\n.  This can be a little frustrating when performing certain kinds of replaces where you want to force upper and lower case on certain characters or series of characters.  Well, no worries, extended back references to the rescue!  You can enable extended back references in the settings file:\n\n\n    \n// Use extended back references\n\n    \nextended_back_references\n:\n \ntrue\n\n\n\n\n\n\nIt is important to note that there has been a slight modification to the common convention; instead of using \n\\u\n and \n\\U\n for uppercase, we use \n\\c\n and \n\\C\n respectively; python strings reserves \n\\u\n for Unicode characters.\n\n\n\n\n\n\n\n\nBack\nReferences\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\\c\n\n\nUppercase the next character.\n\n\n\n\n\n\n\\l\n\n\nLowercase the next character.\n\n\n\n\n\n\n\\C\n\n\nApply uppercase to all characters until either the end of the string or the end marker \n\\E\n is found.\n\n\n\n\n\n\n\\L\n\n\nApply lowercase to all characters until either the end of the string or the end marker \n\\E\n is found.\n\n\n\n\n\n\n\\E\n\n\nSignal the end of an uppercase or lowercase range.\n\n\n\n\n\n\n\n\nExample Usage:\n\n\n    \ntest_case\n:\n \n{\n\n        \nfind\n:\n \n([a-z])(?P\nsomegroup\n[a-z]*)((?:_[a-z]+)+)\n,\n\n        \nreplace\n:\n \n\\\\c\\\\1\\\\L\\\\g\nsomegroup\n\\\\E\\\\C\\\\g\n3\n\\\\E\n,\n\n        \ngreedy\n:\n \ntrue\n\n    \n}", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuring and using RegReplace.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#create-find-and-replace-sequences", 
            "text": "To use, replacements must be defined in the reg_replace.sublime-settings file.  There are two kinds of definitions.  The first uses regex to find regions, and then you can use scopes to qualify the regions before applying the replace.       // Required parameters: \n     //     find:    Regex description of what you would like to target. \n     // \n     // Optional parameters: \n     //     replace:      description of what you would like to replace target with. \n     //                   Variables are okay for non-literal searches and are done by escaping \n     //                   the selection number \\\\1 etc.  Default value is   (empty string) \n     //     literal:      Boolean setting to define whether the find and replace is literal or not. \n     //                   Default is false. \n     //     greedy:       Boolean setting to define whether search is greedy or not. Default is true. \n     //     case:         Boolean defining case sensitivity.  True equals sensitive. Default is true. \n     //     dotall:       Boolean defining whether to use dotall flag in regex (include \\n etc. when using dot). \n     //                   Default is False \n     //     scope_filter: an array of scope qualifiers for the match. \n     //                       - Any instance of scope qualifies match: scope.name \n     //                       - Entire match of scope qualifies match: !scope.name \n     //                       - Any instance of scope disqualifies match: -scope.name \n     //                       - Entire match of scope disqualifies match: -!scope.name \n\n\n     { \n         replacements :   { \n             html5_remove_deprecated_type_attr :   { \n                 find :   ( (style|script)[^ ]*)\\\\stype=(\\ | )text/(css|javascript)(\\ | )([^ ]* ) , \n                 replace :   \\\\1\\\\6 , \n                 greedy :   true , \n                 case :   false \n             },   The second kind of definition allows you to search for a scope type and then apply regex to the regions to filter the matches and make replaces.       // Required parameters: \n     //     scope:    scope you would like to target \n     // \n     // Optional parameters: \n     //     find:            regex description that is to be applied to the scope \n     //                      to qualify.  Also can be used to find and replace \n     //                      within the found scope.  Default is None. \n     //     replace:         description of what you would like to replace within the scope. \n     //                      Default value is  \\\\0 . \n     //     literal:         Boolean setting to define whether the find and replace is literal or not. \n     //                      Default is false. \n     //     greedy_replace:  Boolean setting to define whether regex search is greedy or not. Default is true. \n     //     greedy_scope:    Boolean setting to define whether scope search is greedy or not. Default is true. \n     //     case:            Boolean setting to define whether regex search is case sensitive. Default is true. \n     //     dotall:          Boolean defining whether to use dotall flag in regex (include \\n etc. when using dot). \n     //                      Default is False \n     //     multi_pass_regex:Boolean setting to define whether there will be multiple sweeps on the scope region \n     //                      region to find and replace all instances of the regex, when regex cannot be formatted \n     //                      to find all instances in a greedy fashion.  Default is false. \n\n\n     { \n             replacements :   { \n                 remove_comments :   { \n                     scope :   comment , \n                     find   :   (([^\\\\n\\\\r]*)(\\\\r\\\\n|\\\\n))*([^\\\\n\\\\r]+) , \n                     replace :   , \n                     greedy_replace :   true \n                 }   Once you have replacements defined, there are a number of ways you can run a sequence.  One way is to create a command in the command palette by editing/creating a Default.sublime-commands in your User folder and adding your command.  RegReplace comes with its own Default.sublime-commands file and includes some examples showing simple replacement commands and an example showing the chaining of multiple replacements.       { \n         caption :   Reg Replace: Remove Trailing Spaces , \n         command :   reg_replace , \n         args :   { replacements :   [ remove_trailing_spaces ]} \n     },   Chained replacements in one command       { \n         caption :   Reg Replace: Remove HTML Comments and Trailing Spaces , \n         command :   reg_replace , \n         args :   { replacements :   [ remove_html_comments ,   remove_trailing_spaces ]} \n     }   You can also bind a replacement command to a shortcut.       { \n         keys :   [ ctrl+shift+t ], \n         command :   reg_replace , \n         args :   { replacements :   [ remove_trailing_spaces ]} \n     }", 
            "title": "Create Find and Replace Sequences"
        }, 
        {
            "location": "/usage/#view-without-replacing", 
            "text": "If you would simply like to view what the sequence would find without replacing, you can construct a command to highlight targets without replacing them (each pass could affect the end result, but this just shows all passes without predicting replaces).  Just add the  find_only  argument and set it to true.       { \n         caption :   Reg Replace: Remove Trailing Spaces , \n         command :   reg_replace , \n         args :   { replacements :   [ remove_trailing_spaces ],   find_only :   true } \n     },   A prompt will appear allowing you to replace the highlighted regions.  Regions will be cleared on cancel.  If for any reason the highlights do not get cleared, you can simply run the  RegReplace: Clear Highlights  command from the command palette.  Highlight color and style can be changed in the settings file.", 
            "title": "View Without Replacing"
        }, 
        {
            "location": "/usage/#override-actions", 
            "text": "If instead of replacing you would like to do something else, you can override the action. Actions are defined in commands by setting the  action  parameter.  Some actions may require additional parameters be set in the  options  parameter.  See examples below.       { \n         caption :   Reg Replace: Fold HTML Comments , \n         command :   reg_replace , \n         args :   { replacements :   [ remove_html_comments ],   action :   fold } \n     }, \n     { \n         caption :   Reg Replace: Unfold HTML Comments , \n         command :   reg_replace , \n         args :   { replacements :   [ remove_html_comments ],   action :   unfold } \n     }, \n     { \n         caption :   Reg Replace: Mark Example , \n         command :   reg_replace , \n         args :   { \n             replacements :   [ example ], \n             action :   mark , \n             options :   { key :   name ,   scope :   invalid ,   style :   underline } \n         } \n     }, \n     { \n         caption :   Reg Replace: Unmark Example , \n         command :   reg_replace , \n         args :   { \n             action :   unmark , \n             options :   { key :   name } \n         } \n     },   Supported override actions:   fold  unfold  mark  unmark   Fold Override  action :   fold   This action folds the given find target.  This action has no parameters.  Unfold Override  action :   unfold   This action unfolds the all regions that match the given find target.  This action has no parameters  Mark Override  action :   mark   This action highlights the regions of the given find target.  Mark Options  Action options are specified with the  options  key.  Required Parameters:  options :   { key :   name }   Unique name for highlighted regions.  Optional Parameters:  options :   { scope :   invalid }   Scope name to use as the color. Default is  invalid .  options :   { style :   outline }   Highlight style (solid|underline|outline). Default is  outline .  Unmark Override  action :   unmark   This action removes the highlights of a given  key .  Replacements can be omitted with this command.  Unmark Options  Action options are specified with the  options  key.  Required Parameters:  options :   { key :   name }   unique name of highlighted regions to clear", 
            "title": "Override Actions"
        }, 
        {
            "location": "/usage/#multi-pass", 
            "text": "Sometimes a regular expression cannot be made to find all instances in one pass.  In this case, you can use the multi-pass option.  Multi-pass cannot be paired with override actions (it will be ignored), but it can be paired with  find_only .  Multi-pass will sweep the file repeatedly until all instances are found and replaced.  To protect against poorly constructed multi-pass regex looping forever, there is a default max sweep threshold that will cause the sequence to kick out if it is reached.  This threshold can be tweaked in the settings file.       { \n         caption :   Reg Replace: Remove Trailing Spaces , \n         command :   reg_replace , \n         args :   { replacements :   [ example ],   multi_pass :   true } \n     },", 
            "title": "Multi-Pass"
        }, 
        {
            "location": "/usage/#replace-only-under-selections", 
            "text": "Sometimes you only want to search under selections.  This can be done by enabling the  selection_only  setting in the settings file.  By enabling this setting, regex targets will be limited to the current selection if and only if a selection exists.  Auto replace/highlight on save events ignore this setting.  If you have a command that you wish to ignore this setting, just set the  no_selection  argument to  true .  Highlight style will be forced to underline under selections if  find_only  is set to ensure they will show up.       // Ignore  selection_only  setting \n     { \n         caption :   Reg Replace: Remove Trailing Spaces , \n         command :   reg_replace , \n         args :   { replacements :   [ example ],   multi_pass :   true ,   no_selection :   true } \n     },", 
            "title": "Replace Only Under Selection(s)"
        }, 
        {
            "location": "/usage/#use-regex-on-entire-file-buffer-when-using-selections", 
            "text": "Sometimes you might have a regex chain that lends itself better to performing the regex on the entire file buffer and then pick the matches under the selections as opposed to the default behavior of applying the regex directly to the selection buffer.  To do this, you can use the option  regex_full_file_with_selections .       { \n         caption :   Remove: All Comments , \n         command :   reg_replace , \n         args :   { \n             replacements :   [ \n                 remove_comments ,   remove_trailing_spaces , \n                 remove_excessive_newlines ,   ensure_newline_at_file_end \n             ], \n             find_only :   true , \n             regex_full_file_with_selections :   true \n         } \n     },", 
            "title": "Use Regex on Entire File Buffer when Using Selections"
        }, 
        {
            "location": "/usage/#apply-regex-right-before-file-save-event", 
            "text": "If you want to automatically apply a sequence right before a file saves, you can define sequences in the reg_replace.sublime-settings file.  Each  on save  sequence will be applied to the files you specify by file patterns or file regex.  Also, you must have  on_save  set to  true .  You can also just highlight, fold, or unfold by regex by adding the  action :  mark  key/value pair (options are mark, fold, and unfold). Both types can be used at the same time. Actions are performed after replacements.  Example:       // If on_save is true, RegReplace will search through the file patterns listed below right before a file is saved, \n     // if the file name matches a file pattern, the sequence will be applied before the file is saved. \n     // RegReplace will apply all sequences that apply to a given file in the order they appear below. \n     on_save :   true , \n\n     // Highlight visual settings \n     on_save_highlight_scope :   invalid , \n     on_save_highlight_style :   outline , \n\n     on_save_sequences :   [ \n         // An example on_save event that removes dangling commas from json files \n         // - file_regex: an array of regex strings that must match the file for the sequence to be applied \n         // - case: regex case sensitivity (true|false) false is default (this setting is optional) \n         // - file_pattern: an array of file patterns that must match for the sequence to be applied \n         // - sequence: an array of replacement definitions to be applied on saving the file \n         // - multi_pass: perform multiple passes on file to catch all regex instances \n         { \n             file_regex :   [ .*\\\\.sublime-(settings|commands|menu|keymap|mousemap|theme|build|project|completions|commands) ], \n             file_pattern :   [ *.json ], \n             sequence :   [ remove_json_dangling_commas ] \n         }, \n         // An example on_save_sequence that targets all files and highlights trailing spaces \n         // - file_pattern: an array of file patterns that must match for the sequence to be applied \n         // - sequence: an array of replacement definitions to be applied on saving the file \n         // - action: (mark|fold|unfold) instead of replace \n         { \n             file_pattern :   [ * ], \n             sequence :   [ remove_trailing_spaces ], \n             action :   mark \n         } \n     ],", 
            "title": "Apply Regex Right Before File Save Event"
        }, 
        {
            "location": "/usage/#custom-replace-plugins", 
            "text": "There are times that simple regular expression and replace is not enough.  Since RegReplace uses Python s re regex engine, we can use python code to intercept the replace and do more complex things via a plugin.  In this example we are going to search for dates with the form YYYYMMDD and increment them by one day.  Here is the regex rule, notice we have defined a plugin to replace.  Plugins are defined as if you were importing a module in python.  So in this example, we are loading it from the  User  package. You do not need an  __init__.py  file in  rr_modules  folder; it is recommended to not use one as Sublime shouldn t bother loading these files as RegReplace will load them when needed.  date_up :   { \n     find :   (?P year \\\\d{4})(?P month \\\\d{2})(?P day \\\\d{2}) , \n     plugin :   User.rr_modules.date_up \n     //  args : { some_plugin_arguments :  if_desired }   == optional plugin arguments  }   Next we can define the command that will utilize the regex rule:       { \n         caption :   Replace: Date Up , \n         command :   reg_replace , \n         args :   { replacements :   [ date_up ],   find_only :   true } \n     },   Lastly we can provide the plugin.  RegReplace will load the plugin and look for a function called  replace .   replace  takes a python re match object, and any arguments you want to feed it (arguments are defined in the regex rule as shown above):  SHORT_MONTH   =   30  LONG_MONTH   =   31  FEB_MONTH   =   28  FEB_LEAP_MONTH   =   29  JAN   =   1  FEB   =   2  MAR   =   3  APR   =   4  MAY   =   5  JUN   =   6  JUL   =   7  AUG   =   8  SEP   =   9  OCT   =   10  NOV   =   11  DEC   =   12  def   is_leap_year ( year ): \n     return   (( year   %   4   ==   0 )   and   ( year   %   100   !=   0 ))   or   ( year   %   400   ==   0 )  def   days_in_months ( month ,   year ): \n     days   =   LONG_MONTH \n     if   month   ==   FEB : \n         days   =   FEB_LEAP_MONTH   if   is_leap_year ( year )   else   FEB_MONTH \n     elif   month   in   [ SEP ,   APR ,   JUN ,   NOV ]: \n         days   =   SHORT_MONTH \n     return   days  def   increment_by_day ( day ,   month ,   year ): \n     mdays   =   days_in_months ( month ,   year ) \n     if   day   ==   mdays : \n         day   =   1 \n         if   month   ==   DEC : \n             month   =   JAN \n             year   +=   1 \n         else : \n             month   +=   1 \n     else : \n         day   +=   1 \n\n     return   day ,   month ,   year  def   replace ( m ): \n     g   =   m . groupdict () \n     year   =   int ( g [ year ] . lstrip ( 0 )) \n     month   =   int ( g [ month ] . lstrip ( 0 )) \n     day   =   int ( g [ day ] . lstrip ( 0 )) \n\n     day ,   month ,   year   =   increment_by_day ( day ,   month ,   year ) \n\n     return   %04d%02d%02d   %   ( year ,   month ,   day )   Here is some text to test the example on:  # Test 1: 20140228\n# Test 2: 20141231\n# Test 3: 20140101  RegReplace comes with a very simple example you can test with found at  /Packages/RegReplace/rr_modules/example.py .  Imported with  RegReplace.rr_modules.example .", 
            "title": "Custom Replace Plugins"
        }, 
        {
            "location": "/usage/#extended-back-references", 
            "text": "Python s  re  module (which is what RegReplace uses), doesn t support title case back references:  \\u ,  \\U ,  \\l ,  \\L , or  \\E .  This can be a little frustrating when performing certain kinds of replaces where you want to force upper and lower case on certain characters or series of characters.  Well, no worries, extended back references to the rescue!  You can enable extended back references in the settings file:       // Use extended back references \n     extended_back_references :   true   It is important to note that there has been a slight modification to the common convention; instead of using  \\u  and  \\U  for uppercase, we use  \\c  and  \\C  respectively; python strings reserves  \\u  for Unicode characters.     Back References  Description      \\c  Uppercase the next character.    \\l  Lowercase the next character.    \\C  Apply uppercase to all characters until either the end of the string or the end marker  \\E  is found.    \\L  Apply lowercase to all characters until either the end of the string or the end marker  \\E  is found.    \\E  Signal the end of an uppercase or lowercase range.     Example Usage:       test_case :   { \n         find :   ([a-z])(?P somegroup [a-z]*)((?:_[a-z]+)+) , \n         replace :   \\\\c\\\\1\\\\L\\\\g somegroup \\\\E\\\\C\\\\g 3 \\\\E , \n         greedy :   true \n     }", 
            "title": "Extended Back References"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nReg Replace is released under the MIT license.\n\n\nCopyright \n 2011 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Reg Replace is released under the MIT license.  Copyright   2011 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}